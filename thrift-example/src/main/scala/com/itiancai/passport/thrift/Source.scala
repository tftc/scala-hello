/**
 * Generated by Scrooge
 *   version: 4.1.0
 *   rev: 87b84f89477a4737c8d57580a1e8bdaeac529b19
 *   built at: 20150928-114741
 */
package com.itiancai.passport.thrift

import com.twitter.scrooge.ThriftEnum

/**
* 渠道来源
**/
@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object Source {
  
  case object Web extends com.itiancai.passport.thrift.Source {
    val value = 0
    val name = "Web"
    val originalName = "WEB"
  }

  private[this] val _SomeWeb = _root_.scala.Some(com.itiancai.passport.thrift.Source.Web)
  
  case object WebApp extends com.itiancai.passport.thrift.Source {
    val value = 1
    val name = "WebApp"
    val originalName = "WEB_APP"
  }

  private[this] val _SomeWebApp = _root_.scala.Some(com.itiancai.passport.thrift.Source.WebApp)
  
  case object App extends com.itiancai.passport.thrift.Source {
    val value = 2
    val name = "App"
    val originalName = "APP"
  }

  private[this] val _SomeApp = _root_.scala.Some(com.itiancai.passport.thrift.Source.App)
  
  case object Back extends com.itiancai.passport.thrift.Source {
    val value = 3
    val name = "Back"
    val originalName = "BACK"
  }

  private[this] val _SomeBack = _root_.scala.Some(com.itiancai.passport.thrift.Source.Back)
  
  case object Batch extends com.itiancai.passport.thrift.Source {
    val value = 4
    val name = "Batch"
    val originalName = "BATCH"
  }

  private[this] val _SomeBatch = _root_.scala.Some(com.itiancai.passport.thrift.Source.Batch)

  case class EnumUnknownSource(value: Int) extends com.itiancai.passport.thrift.Source {
    val name = "EnumUnknownSource" + value
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): com.itiancai.passport.thrift.Source =
    value match {
      case 0 => com.itiancai.passport.thrift.Source.Web
      case 1 => com.itiancai.passport.thrift.Source.WebApp
      case 2 => com.itiancai.passport.thrift.Source.App
      case 3 => com.itiancai.passport.thrift.Source.Back
      case 4 => com.itiancai.passport.thrift.Source.Batch
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownSource(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): com.itiancai.passport.thrift.Source =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownSource(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[com.itiancai.passport.thrift.Source] =
    value match {
      case 0 => _SomeWeb
      case 1 => _SomeWebApp
      case 2 => _SomeApp
      case 3 => _SomeBack
      case 4 => _SomeBatch
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[com.itiancai.passport.thrift.Source] =
    name.toLowerCase match {
      case "web" => _SomeWeb
      case "webapp" => _SomeWebApp
      case "app" => _SomeApp
      case "back" => _SomeBack
      case "batch" => _SomeBatch
      case _ => _root_.scala.None
    }

  lazy val list: List[com.itiancai.passport.thrift.Source] = scala.List[com.itiancai.passport.thrift.Source](
    com.itiancai.passport.thrift.Source.Web,
    com.itiancai.passport.thrift.Source.WebApp,
    com.itiancai.passport.thrift.Source.App,
    com.itiancai.passport.thrift.Source.Back,
    com.itiancai.passport.thrift.Source.Batch
  )
}


/**
* 渠道来源
**/
@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait Source extends ThriftEnum with Serializable