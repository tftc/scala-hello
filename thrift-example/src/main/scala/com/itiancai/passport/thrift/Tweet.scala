/**
 * Generated by Scrooge
 *   version: 4.1.0
 *   rev: 87b84f89477a4737c8d57580a1e8bdaeac529b19
 *   built at: 20150928-114741
 */
package com.itiancai.passport.thrift

import java.util.Arrays

import com.twitter.scrooge.{LazyTProtocol, TFieldBlob, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo, ThriftStructMetaData}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer

import scala.collection.Map
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer, Builder, HashMap => mutable$HashMap, HashSet => mutable$HashSet}


object Tweet extends ThriftStructCodec3[Tweet] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("Tweet")
  val UserIdField = new TField("userId", TType.I32, 1)
  val UserIdFieldManifest = implicitly[Manifest[Int]]
  val UserNameField = new TField("userName", TType.STRING, 2)
  val UserNameFieldManifest = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      UserIdField,
      false,
      true,
      UserIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      UserNameField,
      false,
      true,
      UserNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Tweet): Unit = {
    if (_item.userName == null) throw new TProtocolException("Required field userName cannot be null")
  }

  def withoutPassthroughFields(original: Tweet): Tweet =
    new Immutable(
      userId =
        {
          val field = original.userId
          field
        },
      userName =
        {
          val field = original.userName
          field
        }
    )

  override def encode(_item: Tweet, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): Tweet = {

    var userId: Int = 0
    var _got_userId = false
    var userNameOffset: Int = -1
    var _got_userName = false

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
    
                userId = readUserIdValue(_iprot)
                _got_userId = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'userId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                userNameOffset = _iprot.offsetSkipString
    
                _got_userName = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'userName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_userId) throw new TProtocolException("Required field 'userId' was not found in serialized data for struct Tweet")
    if (!_got_userName) throw new TProtocolException("Required field 'userName' was not found in serialized data for struct Tweet")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      userId,
      userNameOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): Tweet =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): Tweet = {
    var userId: Int = 0
    var _got_userId = false
    var userName: String = null
    var _got_userName = false
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
                userId = readUserIdValue(_iprot)
                _got_userId = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'userId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                userName = readUserNameValue(_iprot)
                _got_userName = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'userName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_userId) throw new TProtocolException("Required field 'userId' was not found in serialized data for struct Tweet")
    if (!_got_userName) throw new TProtocolException("Required field 'userName' was not found in serialized data for struct Tweet")
    new Immutable(
      userId,
      userName,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    userId: Int,
    userName: String
  ): Tweet =
    new Immutable(
      userId,
      userName
    )

  def unapply(_item: Tweet): _root_.scala.Option[scala.Product2[Int, String]] = _root_.scala.Some(_item)


  @inline private def readUserIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeUserIdField(userId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UserIdField)
    writeUserIdValue(userId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUserIdValue(userId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(userId_item)
  }

  @inline private def readUserNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeUserNameField(userName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UserNameField)
    writeUserNameValue(userName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUserNameValue(userName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(userName_item)
  }


  object Immutable extends ThriftStructCodec3[Tweet] {
    override def encode(_item: Tweet, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): Tweet = Tweet.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[Tweet] = Tweet.metaData
  }

  /**
   * The default read-only implementation of Tweet.  You typically should not need to
   * directly reference this class; instead, use the Tweet.apply method to construct
   * new instances.
   */
  class Immutable(
      val userId: Int,
      val userName: String,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Tweet {
    def this(
      userId: Int,
      userName: String
    ) = this(
      userId,
      userName,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val userId: Int,
      userNameOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Tweet {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val userName: String =
      if (userNameOffset == -1)
        null
      else {
        _proto.decodeString(_buf, userNameOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide signifigant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the Tweet trait with additional state or
   * behavior and implement the read-only methods from Tweet using an underlying
   * instance.
   */
  trait Proxy extends Tweet {
    protected def _underlying_Tweet: Tweet
    override def userId: Int = _underlying_Tweet.userId
    override def userName: String = _underlying_Tweet.userName
    override def _passthroughFields = _underlying_Tweet._passthroughFields
  }
}

trait Tweet
  extends ThriftStruct
  with scala.Product2[Int, String]
  with java.io.Serializable
{
  import Tweet._

  def userId: Int
  def userName: String

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = userId
  def _2 = userName


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeUserIdValue(userId, _oprot)
                _root_.scala.Some(Tweet.UserIdField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (userName ne null) {
                writeUserNameValue(userName, _oprot)
                _root_.scala.Some(Tweet.UserNameField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): Tweet = {
    var userId: Int = this.userId
    var userName: String = this.userName
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        userId = readUserIdValue(_blob.read)
      case 2 =>
        userName = readUserNameValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      userId,
      userName,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): Tweet = {
    var userId: Int = this.userId
    var userName: String = this.userName

    _fieldId match {
      case 1 =>
        userId = 0
      case 2 =>
        userName = null
      case _ =>
    }
    new Immutable(
      userId,
      userName,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetUserId: Tweet = unsetField(1)

  def unsetUserName: Tweet = unsetField(2)


  override def write(_oprot: TProtocol): Unit = {
    Tweet.validate(this)
    _oprot.writeStructBegin(Struct)
    writeUserIdField(userId, _oprot)
    if (userName ne null) writeUserNameField(userName, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    userId: Int = this.userId,
    userName: String = this.userName,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): Tweet =
    new Immutable(
      userId,
      userName,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Tweet]

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[Tweet]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => this.userId
    case 1 => this.userName
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Tweet"
}